/* tslint:disable */
/* eslint-disable */
/*
Visier User Management APIs

Visier APIs for managing users within an organization

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AllUsersGetAPIResponseDTO } from '../models';
// @ts-ignore
import { AssignRevokePermissionsRequest } from '../models';
// @ts-ignore
import { AssignRevokePermissionsResponseDTO } from '../models';
// @ts-ignore
import { Permission } from '../models';
// @ts-ignore
import { PermissionAssignedUsersDTO } from '../models';
// @ts-ignore
import { PermissionsToUserGroupForTenantDTO } from '../models';
// @ts-ignore
import { PermissionsToUserGroupRequestDTO } from '../models';
// @ts-ignore
import { PermissionsToUserGroupsRequestDTO } from '../models';
// @ts-ignore
import { SecurityAssignmentResponseDTO } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { UserCreationAPIRequestDTO } from '../models';
// @ts-ignore
import { UserCreationAPIResponseDTO } from '../models';
// @ts-ignore
import { UserGetAPIResponseDTO } from '../models';
// @ts-ignore
import { UserGroupsGetAPIResponseDTO } from '../models';
// @ts-ignore
import { UserGroupsUsersDTO } from '../models';
// @ts-ignore
import { UserUpdateAPIRequestDTO } from '../models';
// @ts-ignore
import { UsersToUserGroupRequestDTO } from '../models';
// @ts-ignore
import { UsersToUserGroupsRequestDTO } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export const UserManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to create a new user. Administrating tenant users can specify the tenant in which to add a user.
         * @summary Add a user
         * @param {UserCreationAPIRequestDTO} userCreationAPIRequestDTO 
         * @param {string} [tenantCode] Specify the tenant to create a user in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (userCreationAPIRequestDTO: UserCreationAPIRequestDTO, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreationAPIRequestDTO' is not null or undefined
            assertParamExists('addUser', 'userCreationAPIRequestDTO', userCreationAPIRequestDTO)
            const localVarPath = `/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: userCreationAPIRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(userCreationAPIRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to assign users to specific user groups.
         * @summary Assign users to user groups
         * @param {UsersToUserGroupsRequestDTO} usersToUserGroupsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersToUserGroup: async (usersToUserGroupsRequestDTO: UsersToUserGroupsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersToUserGroupsRequestDTO' is not null or undefined
            assertParamExists('addUsersToUserGroup', 'usersToUserGroupsRequestDTO', usersToUserGroupsRequestDTO)
            const localVarPath = `/v1/admin/user-groups/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersToUserGroupsRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/user-groups/users',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersToUserGroupsRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to assign a permission to specific users. Administrating tenant users can assign permissions  to users in the administrating tenant and in the analytic tenants those users belong to.
         * @summary Assign permissions to users
         * @param {AssignRevokePermissionsRequest} assignRevokePermissionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissions: async (assignRevokePermissionsRequest: AssignRevokePermissionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignRevokePermissionsRequest' is not null or undefined
            assertParamExists('assignPermissions', 'assignRevokePermissionsRequest', assignRevokePermissionsRequest)
            const localVarPath = `/v1/admin/permissions/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: assignRevokePermissionsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/permissions/users',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(assignRevokePermissionsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to assign a permission to specific user groups. This assigns the permission to all users in the user group.
         * @summary Assign permissions to user groups
         * @param {PermissionsToUserGroupsRequestDTO} permissionsToUserGroupsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissionsToUserGroups: async (permissionsToUserGroupsRequestDTO: PermissionsToUserGroupsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionsToUserGroupsRequestDTO' is not null or undefined
            assertParamExists('assignPermissionsToUserGroups', 'permissionsToUserGroupsRequestDTO', permissionsToUserGroupsRequestDTO)
            const localVarPath = `/v1/admin/user-groups/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: permissionsToUserGroupsRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/user-groups/permissions',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(permissionsToUserGroupsRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
         * @summary Delete a user
         * @param {string} userId The ID of the user you want to delete.
         * @param {string} [tenantCode] Specify the tenant to delete a user in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/v1/admin/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/{userId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to export the list of permissions in a tenant. This report includes the permission name,  permission description, and permission ID for all permissions in the tenant.   Administrating tenant users can export permissions lists for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve a list of all permissions in XLSX format
         * @param {string} [tenantCode] Specify the tenant to retrieve permissions from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissionsXLSX: async (tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/users/reports/permissions-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/reports/permissions-list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the full list of user groups in a tenant.
         * @summary Retrieve a list of all user groups
         * @param {string} [tenantCode] Specify the tenant to retrieve the list of user groups from.
         * @param {number} [limit] The number of results to return. The maximum number of users to retrieve is 1000.
         * @param {number} [start] The index to start retrieving results from, also known as offset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserGroups: async (tenantCode?: string, limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/user-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/user-groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the full list of users and their current states.
         * @summary Retrieve a list of all users
         * @param {string} [tenantCode] Specify the tenant to retrieve a list of users from.
         * @param {boolean} [assignedProfiles] If true, the response returns a list of the user\&#39;s assigned profiles.
         * @param {boolean} [assignedPermissions] If true, the response returns the user\&#39;s assigned permissions.
         * @param {boolean} [assignedUserGroups] If true, the response returns the user\&#39;s assigned user groups.
         * @param {number} [limit] The number of results to return. The maximum number of users to retrieve is 1000.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (tenantCode?: string, assignedProfiles?: boolean, assignedPermissions?: boolean, assignedUserGroups?: boolean, limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (assignedProfiles !== undefined) {
                localVarQueryParameter['assignedProfiles'] = assignedProfiles;
            }

            if (assignedPermissions !== undefined) {
                localVarQueryParameter['assignedPermissions'] = assignedPermissions;
            }

            if (assignedUserGroups !== undefined) {
                localVarQueryParameter['assignedUserGroups'] = assignedUserGroups;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to export the Application Logs for a tenant. The Application Logs track information about your  users and how they are using the application. Performing regular audits will help you identify potential security  issues and keep your data safe. As part of user management, download the Application Logs to monitor user activity  and logon events to ensure your users are performing authorized activities.   Administrating tenant users can export application logs for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve the Application Logs
         * @param {string} [startTime] An inclusive date-time to start retrieving Application Logs from.
         * @param {string} [endTime] An exclusive date-time to stop retrieving Application Logs from.
         * @param {string} [tenantCode] Specify the tenant to retrieve Application Logs from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationLogsXLSX: async (startTime?: string, endTime?: string, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/users/reports/application-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/reports/application-logs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to export the data security report of a user. The Data Security Report provides information  about a specific user to see which populations and properties that user has access to as a result of the  permissions assigned to them.   Administrating tenant users can export the report for users in the administrating tenant and the analytic  tenants those users belong to.
         * @summary Retrieve the Data Security Report
         * @param {string} userId The ID of the user to retrieve the report for.
         * @param {string} [tenantCode] Specify the tenant to retrieve the Data Security Report from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSecurityReportXLSX: async (userId: string, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getDataSecurityReportXLSX', 'userId', userId)
            const localVarPath = `/v1/admin/users/{userId}/reports/data-security`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/{userId}/reports/data-security',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve all the users that are assigned a specified permission. You must know the ID  of the permission you want to retrieve users for.
         * @summary Retrieve users that are assigned a specific permission
         * @param {string} permissionId The unique identifier of the permission you want to retrieve users for.
         * @param {boolean} [includeUserGroups] If true, the response returns a list of all users that are assigned the permission, including users that are  assigned the permission through a user group. If false, the response returns a list of the users that are directly assigned the permission.
         * @param {string} [tenantFilter] Specify the tenant to retrieve the list of users from.
         * @param {number} [limit] The number of results to return. The maximum number of tenants to retrieve is 100.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionAssignedUsers: async (permissionId: string, includeUserGroups?: boolean, tenantFilter?: string, limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('getPermissionAssignedUsers', 'permissionId', permissionId)
            const localVarPath = `/v1/admin/permissions/{permissionId}/users`
                .replace(`{${"permissionId"}}`, encodeURIComponent(String(permissionId !== undefined ? permissionId : `-permissionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (includeUserGroups !== undefined) {
                localVarQueryParameter['includeUserGroups'] = includeUserGroups;
            }

            if (tenantFilter !== undefined) {
                localVarQueryParameter['tenantFilter'] = tenantFilter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/permissions/{permissionId}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to export the profiles assigned to each user. This report details the profiles assigned to  each user and the profile validity period.   Administrating tenant users can export profile assignments for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve user profile assignments in XLSX format
         * @param {string} [tenantCode] Specify the tenant to retrieve profile assignments from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileAssignmentsXLSX: async (tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/users/reports/profile-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/reports/profile-assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve all details for a specified user.
         * @summary Retrieve a user\'s details
         * @param {string} userId The ID of the user you want to retrieve.
         * @param {string} [tenantCode] Specify the tenant to retrieve a user from.
         * @param {boolean} [assignedProfiles] If true, the response returns a list of the user\&#39;s assigned profiles.
         * @param {boolean} [assignedPermissions] If true, the response returns the user\&#39;s assigned permissions.
         * @param {boolean} [assignedUserGroups] If true, the response returns the user\&#39;s assigned user groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetail: async (userId: string, tenantCode?: string, assignedProfiles?: boolean, assignedPermissions?: boolean, assignedUserGroups?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserDetail', 'userId', userId)
            const localVarPath = `/v1/admin/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (assignedProfiles !== undefined) {
                localVarQueryParameter['assignedProfiles'] = assignedProfiles;
            }

            if (assignedPermissions !== undefined) {
                localVarQueryParameter['assignedPermissions'] = assignedPermissions;
            }

            if (assignedUserGroups !== undefined) {
                localVarQueryParameter['assignedUserGroups'] = assignedUserGroups;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/{userId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the list of users explicitly assigned to a user group. Users that are implicitly  included in the user group through the user group\'s dynamic filters are not returned by this endpoint.
         * @summary Retrieve a list of user group users
         * @param {string} userGroupId The ID of user group.
         * @param {string} [tenantFilter] Specifies the tenant to retrieve the list of users from.
         * @param {number} [limit] The number of results to return. The maximum number of tenants to retrieve is 100.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupUsers: async (userGroupId: string, tenantFilter?: string, limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userGroupId' is not null or undefined
            assertParamExists('getUserGroupUsers', 'userGroupId', userGroupId)
            const localVarPath = `/v1/admin/user-groups/{userGroupId}/users`
                .replace(`{${"userGroupId"}}`, encodeURIComponent(String(userGroupId !== undefined ? userGroupId : `-userGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantFilter !== undefined) {
                localVarQueryParameter['tenantFilter'] = tenantFilter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/user-groups/{userGroupId}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to export the user permission assignments for a tenant. The permission assignments report  provides a summary of the permissions your users have been assigned and how each permission is being used across  your user base, as well as the users that do not have any permissions assigned to them.   Administrating tenant users can export permission assignments for the administrating tenant and the analytic  tenants those users belong to.
         * @summary Retrieve user permissions in XLSX format
         * @param {string} [tenantCode] Specify the tenant to retrieve the permission assignments report from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionsXLSX: async (tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/users/reports/permission-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/reports/permission-assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to remove a permission from specific users. Administrating tenant users can remove permissions  from users in the administrating tenant and in the analytic tenants those users belong to.
         * @summary Remove permissions from users
         * @param {AssignRevokePermissionsRequest} assignRevokePermissionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePermissions: async (assignRevokePermissionsRequest: AssignRevokePermissionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignRevokePermissionsRequest' is not null or undefined
            assertParamExists('removePermissions', 'assignRevokePermissionsRequest', assignRevokePermissionsRequest)
            const localVarPath = `/v1/admin/permissions/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: assignRevokePermissionsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/permissions/users',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(assignRevokePermissionsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to remove users from specific user groups.
         * @summary Remove users from user groups
         * @param {UsersToUserGroupsRequestDTO} usersToUserGroupsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUsersFromUserGroup: async (usersToUserGroupsRequestDTO: UsersToUserGroupsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersToUserGroupsRequestDTO' is not null or undefined
            assertParamExists('removeUsersFromUserGroup', 'usersToUserGroupsRequestDTO', usersToUserGroupsRequestDTO)
            const localVarPath = `/v1/admin/user-groups/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersToUserGroupsRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/user-groups/users',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersToUserGroupsRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to remove a permission from specific user groups.
         * @summary Remove permissions from user groups
         * @param {PermissionsToUserGroupsRequestDTO} permissionsToUserGroupsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokePermissionsFromUserGroups: async (permissionsToUserGroupsRequestDTO: PermissionsToUserGroupsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionsToUserGroupsRequestDTO' is not null or undefined
            assertParamExists('revokePermissionsFromUserGroups', 'permissionsToUserGroupsRequestDTO', permissionsToUserGroupsRequestDTO)
            const localVarPath = `/v1/admin/user-groups/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: permissionsToUserGroupsRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/user-groups/permissions',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(permissionsToUserGroupsRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update an existing user\'s information, such as their display name or if the user is enabled in Visier.
         * @summary Update a user
         * @param {string} userId The ID of the user you want to update.
         * @param {UserUpdateAPIRequestDTO} userUpdateAPIRequestDTO 
         * @param {string} [tenantCode] Specify the tenant to update a user in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, userUpdateAPIRequestDTO: UserUpdateAPIRequestDTO, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'userUpdateAPIRequestDTO' is not null or undefined
            assertParamExists('updateUser', 'userUpdateAPIRequestDTO', userUpdateAPIRequestDTO)
            const localVarPath = `/v1/admin/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: userUpdateAPIRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/{userId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateAPIRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementApi - functional programming interface
 * @export
 */
export const UserManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to create a new user. Administrating tenant users can specify the tenant in which to add a user.
         * @summary Add a user
         * @param {UserManagementApiAddUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(requestParameters: UserManagementApiAddUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCreationAPIResponseDTO>> {
            const userCreationAPIRequestDTO: UserCreationAPIRequestDTO = {
                username: requestParameters.username,
                displayName: requestParameters.displayName,
                employeeId: requestParameters.employeeId,
                accountEnabled: requestParameters.accountEnabled,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(userCreationAPIRequestDTO, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to assign users to specific user groups.
         * @summary Assign users to user groups
         * @param {UserManagementApiAddUsersToUserGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsersToUserGroup(requestParameters: UserManagementApiAddUsersToUserGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityAssignmentResponseDTO>> {
            const usersToUserGroupsRequestDTO: UsersToUserGroupsRequestDTO = {
                userGroups: requestParameters.userGroups
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUsersToUserGroup(usersToUserGroupsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to assign a permission to specific users. Administrating tenant users can assign permissions  to users in the administrating tenant and in the analytic tenants those users belong to.
         * @summary Assign permissions to users
         * @param {UserManagementApiAssignPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPermissions(requestParameters: UserManagementApiAssignPermissionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignRevokePermissionsResponseDTO>> {
            const assignRevokePermissionsRequest: AssignRevokePermissionsRequest = {
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissions(assignRevokePermissionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to assign a permission to specific user groups. This assigns the permission to all users in the user group.
         * @summary Assign permissions to user groups
         * @param {UserManagementApiAssignPermissionsToUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPermissionsToUserGroups(requestParameters: UserManagementApiAssignPermissionsToUserGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionsToUserGroupForTenantDTO>> {
            const permissionsToUserGroupsRequestDTO: PermissionsToUserGroupsRequestDTO = {
                userGroups: requestParameters.userGroups
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissionsToUserGroups(permissionsToUserGroupsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
         * @summary Delete a user
         * @param {UserManagementApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(requestParameters: UserManagementApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(requestParameters.userId, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to export the list of permissions in a tenant. This report includes the permission name,  permission description, and permission ID for all permissions in the tenant.   Administrating tenant users can export permissions lists for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve a list of all permissions in XLSX format
         * @param {UserManagementApiGetAllPermissionsXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPermissionsXLSX(requestParameters: UserManagementApiGetAllPermissionsXLSXRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPermissionsXLSX(requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the full list of user groups in a tenant.
         * @summary Retrieve a list of all user groups
         * @param {UserManagementApiGetAllUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserGroups(requestParameters: UserManagementApiGetAllUserGroupsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroupsGetAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserGroups(requestParameters.tenantCode, requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the full list of users and their current states.
         * @summary Retrieve a list of all users
         * @param {UserManagementApiGetAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(requestParameters: UserManagementApiGetAllUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllUsersGetAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(requestParameters.tenantCode, requestParameters.assignedProfiles, requestParameters.assignedPermissions, requestParameters.assignedUserGroups, requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to export the Application Logs for a tenant. The Application Logs track information about your  users and how they are using the application. Performing regular audits will help you identify potential security  issues and keep your data safe. As part of user management, download the Application Logs to monitor user activity  and logon events to ensure your users are performing authorized activities.   Administrating tenant users can export application logs for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve the Application Logs
         * @param {UserManagementApiGetApplicationLogsXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationLogsXLSX(requestParameters: UserManagementApiGetApplicationLogsXLSXRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationLogsXLSX(requestParameters.startTime, requestParameters.endTime, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to export the data security report of a user. The Data Security Report provides information  about a specific user to see which populations and properties that user has access to as a result of the  permissions assigned to them.   Administrating tenant users can export the report for users in the administrating tenant and the analytic  tenants those users belong to.
         * @summary Retrieve the Data Security Report
         * @param {UserManagementApiGetDataSecurityReportXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSecurityReportXLSX(requestParameters: UserManagementApiGetDataSecurityReportXLSXRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataSecurityReportXLSX(requestParameters.userId, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve all the users that are assigned a specified permission. You must know the ID  of the permission you want to retrieve users for.
         * @summary Retrieve users that are assigned a specific permission
         * @param {UserManagementApiGetPermissionAssignedUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionAssignedUsers(requestParameters: UserManagementApiGetPermissionAssignedUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionAssignedUsersDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissionAssignedUsers(requestParameters.permissionId, requestParameters.includeUserGroups, requestParameters.tenantFilter, requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to export the profiles assigned to each user. This report details the profiles assigned to  each user and the profile validity period.   Administrating tenant users can export profile assignments for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve user profile assignments in XLSX format
         * @param {UserManagementApiGetProfileAssignmentsXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileAssignmentsXLSX(requestParameters: UserManagementApiGetProfileAssignmentsXLSXRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileAssignmentsXLSX(requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve all details for a specified user.
         * @summary Retrieve a user\'s details
         * @param {UserManagementApiGetUserDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDetail(requestParameters: UserManagementApiGetUserDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDetail(requestParameters.userId, requestParameters.tenantCode, requestParameters.assignedProfiles, requestParameters.assignedPermissions, requestParameters.assignedUserGroups, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the list of users explicitly assigned to a user group. Users that are implicitly  included in the user group through the user group\'s dynamic filters are not returned by this endpoint.
         * @summary Retrieve a list of user group users
         * @param {UserManagementApiGetUserGroupUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGroupUsers(requestParameters: UserManagementApiGetUserGroupUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroupsUsersDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroupUsers(requestParameters.userGroupId, requestParameters.tenantFilter, requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to export the user permission assignments for a tenant. The permission assignments report  provides a summary of the permissions your users have been assigned and how each permission is being used across  your user base, as well as the users that do not have any permissions assigned to them.   Administrating tenant users can export permission assignments for the administrating tenant and the analytic  tenants those users belong to.
         * @summary Retrieve user permissions in XLSX format
         * @param {UserManagementApiGetUserPermissionsXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPermissionsXLSX(requestParameters: UserManagementApiGetUserPermissionsXLSXRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPermissionsXLSX(requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to remove a permission from specific users. Administrating tenant users can remove permissions  from users in the administrating tenant and in the analytic tenants those users belong to.
         * @summary Remove permissions from users
         * @param {UserManagementApiRemovePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePermissions(requestParameters: UserManagementApiRemovePermissionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignRevokePermissionsResponseDTO>> {
            const assignRevokePermissionsRequest: AssignRevokePermissionsRequest = {
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePermissions(assignRevokePermissionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to remove users from specific user groups.
         * @summary Remove users from user groups
         * @param {UserManagementApiRemoveUsersFromUserGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUsersFromUserGroup(requestParameters: UserManagementApiRemoveUsersFromUserGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityAssignmentResponseDTO>> {
            const usersToUserGroupsRequestDTO: UsersToUserGroupsRequestDTO = {
                userGroups: requestParameters.userGroups
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUsersFromUserGroup(usersToUserGroupsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to remove a permission from specific user groups.
         * @summary Remove permissions from user groups
         * @param {UserManagementApiRevokePermissionsFromUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokePermissionsFromUserGroups(requestParameters: UserManagementApiRevokePermissionsFromUserGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionsToUserGroupForTenantDTO>> {
            const permissionsToUserGroupsRequestDTO: PermissionsToUserGroupsRequestDTO = {
                userGroups: requestParameters.userGroups
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokePermissionsFromUserGroups(permissionsToUserGroupsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to update an existing user\'s information, such as their display name or if the user is enabled in Visier.
         * @summary Update a user
         * @param {UserManagementApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(requestParameters: UserManagementApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdateAPIRequestDTO>> {
            const userUpdateAPIRequestDTO: UserUpdateAPIRequestDTO = {
                displayName: requestParameters.displayName,
                employeeId: requestParameters.employeeId,
                accountEnabled: requestParameters.accountEnabled,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(requestParameters.userId, userUpdateAPIRequestDTO, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserManagementApi - factory interface
 * @export
 */
export const UserManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementApiFp(configuration)
    return {
        /**
         * This API allows you to create a new user. Administrating tenant users can specify the tenant in which to add a user.
         * @summary Add a user
         * @param {UserManagementApiAddUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(requestParameters: UserManagementApiAddUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserCreationAPIResponseDTO> {
            return localVarFp.addUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to assign users to specific user groups.
         * @summary Assign users to user groups
         * @param {UserManagementApiAddUsersToUserGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersToUserGroup(requestParameters: UserManagementApiAddUsersToUserGroupRequest, options?: AxiosRequestConfig): AxiosPromise<SecurityAssignmentResponseDTO> {
            return localVarFp.addUsersToUserGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to assign a permission to specific users. Administrating tenant users can assign permissions  to users in the administrating tenant and in the analytic tenants those users belong to.
         * @summary Assign permissions to users
         * @param {UserManagementApiAssignPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissions(requestParameters: UserManagementApiAssignPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<AssignRevokePermissionsResponseDTO> {
            return localVarFp.assignPermissions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to assign a permission to specific user groups. This assigns the permission to all users in the user group.
         * @summary Assign permissions to user groups
         * @param {UserManagementApiAssignPermissionsToUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissionsToUserGroups(requestParameters: UserManagementApiAssignPermissionsToUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<PermissionsToUserGroupForTenantDTO> {
            return localVarFp.assignPermissionsToUserGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
         * @summary Delete a user
         * @param {UserManagementApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: UserManagementApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to export the list of permissions in a tenant. This report includes the permission name,  permission description, and permission ID for all permissions in the tenant.   Administrating tenant users can export permissions lists for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve a list of all permissions in XLSX format
         * @param {UserManagementApiGetAllPermissionsXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissionsXLSX(requestParameters: UserManagementApiGetAllPermissionsXLSXRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getAllPermissionsXLSX(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the full list of user groups in a tenant.
         * @summary Retrieve a list of all user groups
         * @param {UserManagementApiGetAllUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserGroups(requestParameters: UserManagementApiGetAllUserGroupsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserGroupsGetAPIResponseDTO> {
            return localVarFp.getAllUserGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the full list of users and their current states.
         * @summary Retrieve a list of all users
         * @param {UserManagementApiGetAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(requestParameters: UserManagementApiGetAllUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AllUsersGetAPIResponseDTO> {
            return localVarFp.getAllUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to export the Application Logs for a tenant. The Application Logs track information about your  users and how they are using the application. Performing regular audits will help you identify potential security  issues and keep your data safe. As part of user management, download the Application Logs to monitor user activity  and logon events to ensure your users are performing authorized activities.   Administrating tenant users can export application logs for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve the Application Logs
         * @param {UserManagementApiGetApplicationLogsXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationLogsXLSX(requestParameters: UserManagementApiGetApplicationLogsXLSXRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getApplicationLogsXLSX(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to export the data security report of a user. The Data Security Report provides information  about a specific user to see which populations and properties that user has access to as a result of the  permissions assigned to them.   Administrating tenant users can export the report for users in the administrating tenant and the analytic  tenants those users belong to.
         * @summary Retrieve the Data Security Report
         * @param {UserManagementApiGetDataSecurityReportXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSecurityReportXLSX(requestParameters: UserManagementApiGetDataSecurityReportXLSXRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getDataSecurityReportXLSX(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve all the users that are assigned a specified permission. You must know the ID  of the permission you want to retrieve users for.
         * @summary Retrieve users that are assigned a specific permission
         * @param {UserManagementApiGetPermissionAssignedUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionAssignedUsers(requestParameters: UserManagementApiGetPermissionAssignedUsersRequest, options?: AxiosRequestConfig): AxiosPromise<PermissionAssignedUsersDTO> {
            return localVarFp.getPermissionAssignedUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to export the profiles assigned to each user. This report details the profiles assigned to  each user and the profile validity period.   Administrating tenant users can export profile assignments for the administrating tenant and the analytic tenants  those users belong to.
         * @summary Retrieve user profile assignments in XLSX format
         * @param {UserManagementApiGetProfileAssignmentsXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileAssignmentsXLSX(requestParameters: UserManagementApiGetProfileAssignmentsXLSXRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getProfileAssignmentsXLSX(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve all details for a specified user.
         * @summary Retrieve a user\'s details
         * @param {UserManagementApiGetUserDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetail(requestParameters: UserManagementApiGetUserDetailRequest, options?: AxiosRequestConfig): AxiosPromise<UserGetAPIResponseDTO> {
            return localVarFp.getUserDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the list of users explicitly assigned to a user group. Users that are implicitly  included in the user group through the user group\'s dynamic filters are not returned by this endpoint.
         * @summary Retrieve a list of user group users
         * @param {UserManagementApiGetUserGroupUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupUsers(requestParameters: UserManagementApiGetUserGroupUsersRequest, options?: AxiosRequestConfig): AxiosPromise<UserGroupsUsersDTO> {
            return localVarFp.getUserGroupUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to export the user permission assignments for a tenant. The permission assignments report  provides a summary of the permissions your users have been assigned and how each permission is being used across  your user base, as well as the users that do not have any permissions assigned to them.   Administrating tenant users can export permission assignments for the administrating tenant and the analytic  tenants those users belong to.
         * @summary Retrieve user permissions in XLSX format
         * @param {UserManagementApiGetUserPermissionsXLSXRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionsXLSX(requestParameters: UserManagementApiGetUserPermissionsXLSXRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getUserPermissionsXLSX(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to remove a permission from specific users. Administrating tenant users can remove permissions  from users in the administrating tenant and in the analytic tenants those users belong to.
         * @summary Remove permissions from users
         * @param {UserManagementApiRemovePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePermissions(requestParameters: UserManagementApiRemovePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<AssignRevokePermissionsResponseDTO> {
            return localVarFp.removePermissions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to remove users from specific user groups.
         * @summary Remove users from user groups
         * @param {UserManagementApiRemoveUsersFromUserGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUsersFromUserGroup(requestParameters: UserManagementApiRemoveUsersFromUserGroupRequest, options?: AxiosRequestConfig): AxiosPromise<SecurityAssignmentResponseDTO> {
            return localVarFp.removeUsersFromUserGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to remove a permission from specific user groups.
         * @summary Remove permissions from user groups
         * @param {UserManagementApiRevokePermissionsFromUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokePermissionsFromUserGroups(requestParameters: UserManagementApiRevokePermissionsFromUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<PermissionsToUserGroupForTenantDTO> {
            return localVarFp.revokePermissionsFromUserGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update an existing user\'s information, such as their display name or if the user is enabled in Visier.
         * @summary Update a user
         * @param {UserManagementApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UserManagementApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserUpdateAPIRequestDTO> {
            return localVarFp.updateUser(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUser operation in UserManagementApi.
 * @export
 * @interface UserManagementApiAddUserRequest
 */
export type UserManagementApiAddUserRequest = {
    
    /**
    * Specify the tenant to create a user in.
    * @type {string}
    * @memberof UserManagementApiAddUser
    */
    readonly tenantCode?: string
    
} & UserCreationAPIRequestDTO

/**
 * Request parameters for addUsersToUserGroup operation in UserManagementApi.
 * @export
 * @interface UserManagementApiAddUsersToUserGroupRequest
 */
export type UserManagementApiAddUsersToUserGroupRequest = {
    
} & UsersToUserGroupsRequestDTO

/**
 * Request parameters for assignPermissions operation in UserManagementApi.
 * @export
 * @interface UserManagementApiAssignPermissionsRequest
 */
export type UserManagementApiAssignPermissionsRequest = {
    
} & AssignRevokePermissionsRequest

/**
 * Request parameters for assignPermissionsToUserGroups operation in UserManagementApi.
 * @export
 * @interface UserManagementApiAssignPermissionsToUserGroupsRequest
 */
export type UserManagementApiAssignPermissionsToUserGroupsRequest = {
    
} & PermissionsToUserGroupsRequestDTO

/**
 * Request parameters for deleteUser operation in UserManagementApi.
 * @export
 * @interface UserManagementApiDeleteUserRequest
 */
export type UserManagementApiDeleteUserRequest = {
    
    /**
    * The ID of the user you want to delete.
    * @type {string}
    * @memberof UserManagementApiDeleteUser
    */
    readonly userId: string
    
    /**
    * Specify the tenant to delete a user in.
    * @type {string}
    * @memberof UserManagementApiDeleteUser
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getAllPermissionsXLSX operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetAllPermissionsXLSXRequest
 */
export type UserManagementApiGetAllPermissionsXLSXRequest = {
    
    /**
    * Specify the tenant to retrieve permissions from.
    * @type {string}
    * @memberof UserManagementApiGetAllPermissionsXLSX
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getAllUserGroups operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetAllUserGroupsRequest
 */
export type UserManagementApiGetAllUserGroupsRequest = {
    
    /**
    * Specify the tenant to retrieve the list of user groups from.
    * @type {string}
    * @memberof UserManagementApiGetAllUserGroups
    */
    readonly tenantCode?: string
    
    /**
    * The number of results to return. The maximum number of users to retrieve is 1000.
    * @type {number}
    * @memberof UserManagementApiGetAllUserGroups
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset.
    * @type {number}
    * @memberof UserManagementApiGetAllUserGroups
    */
    readonly start?: number
    
}

/**
 * Request parameters for getAllUsers operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetAllUsersRequest
 */
export type UserManagementApiGetAllUsersRequest = {
    
    /**
    * Specify the tenant to retrieve a list of users from.
    * @type {string}
    * @memberof UserManagementApiGetAllUsers
    */
    readonly tenantCode?: string
    
    /**
    * If true, the response returns a list of the user\'s assigned profiles.
    * @type {boolean}
    * @memberof UserManagementApiGetAllUsers
    */
    readonly assignedProfiles?: boolean
    
    /**
    * If true, the response returns the user\'s assigned permissions.
    * @type {boolean}
    * @memberof UserManagementApiGetAllUsers
    */
    readonly assignedPermissions?: boolean
    
    /**
    * If true, the response returns the user\'s assigned user groups.
    * @type {boolean}
    * @memberof UserManagementApiGetAllUsers
    */
    readonly assignedUserGroups?: boolean
    
    /**
    * The number of results to return. The maximum number of users to retrieve is 1000.
    * @type {number}
    * @memberof UserManagementApiGetAllUsers
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof UserManagementApiGetAllUsers
    */
    readonly start?: number
    
}

/**
 * Request parameters for getApplicationLogsXLSX operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetApplicationLogsXLSXRequest
 */
export type UserManagementApiGetApplicationLogsXLSXRequest = {
    
    /**
    * An inclusive date-time to start retrieving Application Logs from.
    * @type {string}
    * @memberof UserManagementApiGetApplicationLogsXLSX
    */
    readonly startTime?: string
    
    /**
    * An exclusive date-time to stop retrieving Application Logs from.
    * @type {string}
    * @memberof UserManagementApiGetApplicationLogsXLSX
    */
    readonly endTime?: string
    
    /**
    * Specify the tenant to retrieve Application Logs from.
    * @type {string}
    * @memberof UserManagementApiGetApplicationLogsXLSX
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getDataSecurityReportXLSX operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetDataSecurityReportXLSXRequest
 */
export type UserManagementApiGetDataSecurityReportXLSXRequest = {
    
    /**
    * The ID of the user to retrieve the report for.
    * @type {string}
    * @memberof UserManagementApiGetDataSecurityReportXLSX
    */
    readonly userId: string
    
    /**
    * Specify the tenant to retrieve the Data Security Report from.
    * @type {string}
    * @memberof UserManagementApiGetDataSecurityReportXLSX
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getPermissionAssignedUsers operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetPermissionAssignedUsersRequest
 */
export type UserManagementApiGetPermissionAssignedUsersRequest = {
    
    /**
    * The unique identifier of the permission you want to retrieve users for.
    * @type {string}
    * @memberof UserManagementApiGetPermissionAssignedUsers
    */
    readonly permissionId: string
    
    /**
    * If true, the response returns a list of all users that are assigned the permission, including users that are  assigned the permission through a user group. If false, the response returns a list of the users that are directly assigned the permission.
    * @type {boolean}
    * @memberof UserManagementApiGetPermissionAssignedUsers
    */
    readonly includeUserGroups?: boolean
    
    /**
    * Specify the tenant to retrieve the list of users from.
    * @type {string}
    * @memberof UserManagementApiGetPermissionAssignedUsers
    */
    readonly tenantFilter?: string
    
    /**
    * The number of results to return. The maximum number of tenants to retrieve is 100.
    * @type {number}
    * @memberof UserManagementApiGetPermissionAssignedUsers
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof UserManagementApiGetPermissionAssignedUsers
    */
    readonly start?: number
    
}

/**
 * Request parameters for getProfileAssignmentsXLSX operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetProfileAssignmentsXLSXRequest
 */
export type UserManagementApiGetProfileAssignmentsXLSXRequest = {
    
    /**
    * Specify the tenant to retrieve profile assignments from.
    * @type {string}
    * @memberof UserManagementApiGetProfileAssignmentsXLSX
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getUserDetail operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetUserDetailRequest
 */
export type UserManagementApiGetUserDetailRequest = {
    
    /**
    * The ID of the user you want to retrieve.
    * @type {string}
    * @memberof UserManagementApiGetUserDetail
    */
    readonly userId: string
    
    /**
    * Specify the tenant to retrieve a user from.
    * @type {string}
    * @memberof UserManagementApiGetUserDetail
    */
    readonly tenantCode?: string
    
    /**
    * If true, the response returns a list of the user\'s assigned profiles.
    * @type {boolean}
    * @memberof UserManagementApiGetUserDetail
    */
    readonly assignedProfiles?: boolean
    
    /**
    * If true, the response returns the user\'s assigned permissions.
    * @type {boolean}
    * @memberof UserManagementApiGetUserDetail
    */
    readonly assignedPermissions?: boolean
    
    /**
    * If true, the response returns the user\'s assigned user groups.
    * @type {boolean}
    * @memberof UserManagementApiGetUserDetail
    */
    readonly assignedUserGroups?: boolean
    
}

/**
 * Request parameters for getUserGroupUsers operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetUserGroupUsersRequest
 */
export type UserManagementApiGetUserGroupUsersRequest = {
    
    /**
    * The ID of user group.
    * @type {string}
    * @memberof UserManagementApiGetUserGroupUsers
    */
    readonly userGroupId: string
    
    /**
    * Specifies the tenant to retrieve the list of users from.
    * @type {string}
    * @memberof UserManagementApiGetUserGroupUsers
    */
    readonly tenantFilter?: string
    
    /**
    * The number of results to return. The maximum number of tenants to retrieve is 100.
    * @type {number}
    * @memberof UserManagementApiGetUserGroupUsers
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof UserManagementApiGetUserGroupUsers
    */
    readonly start?: number
    
}

/**
 * Request parameters for getUserPermissionsXLSX operation in UserManagementApi.
 * @export
 * @interface UserManagementApiGetUserPermissionsXLSXRequest
 */
export type UserManagementApiGetUserPermissionsXLSXRequest = {
    
    /**
    * Specify the tenant to retrieve the permission assignments report from.
    * @type {string}
    * @memberof UserManagementApiGetUserPermissionsXLSX
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for removePermissions operation in UserManagementApi.
 * @export
 * @interface UserManagementApiRemovePermissionsRequest
 */
export type UserManagementApiRemovePermissionsRequest = {
    
} & AssignRevokePermissionsRequest

/**
 * Request parameters for removeUsersFromUserGroup operation in UserManagementApi.
 * @export
 * @interface UserManagementApiRemoveUsersFromUserGroupRequest
 */
export type UserManagementApiRemoveUsersFromUserGroupRequest = {
    
} & UsersToUserGroupsRequestDTO

/**
 * Request parameters for revokePermissionsFromUserGroups operation in UserManagementApi.
 * @export
 * @interface UserManagementApiRevokePermissionsFromUserGroupsRequest
 */
export type UserManagementApiRevokePermissionsFromUserGroupsRequest = {
    
} & PermissionsToUserGroupsRequestDTO

/**
 * Request parameters for updateUser operation in UserManagementApi.
 * @export
 * @interface UserManagementApiUpdateUserRequest
 */
export type UserManagementApiUpdateUserRequest = {
    
    /**
    * The ID of the user you want to update.
    * @type {string}
    * @memberof UserManagementApiUpdateUser
    */
    readonly userId: string
    
    /**
    * Specify the tenant to update a user in.
    * @type {string}
    * @memberof UserManagementApiUpdateUser
    */
    readonly tenantCode?: string
    
} & UserUpdateAPIRequestDTO

/**
 * UserManagementApiGenerated - object-oriented interface
 * @export
 * @class UserManagementApiGenerated
 * @extends {BaseAPI}
 */
export class UserManagementApiGenerated extends BaseAPI {
    /**
     * This API allows you to create a new user. Administrating tenant users can specify the tenant in which to add a user.
     * @summary Add a user
     * @param {UserManagementApiAddUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public addUser(requestParameters: UserManagementApiAddUserRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).addUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to assign users to specific user groups.
     * @summary Assign users to user groups
     * @param {UserManagementApiAddUsersToUserGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public addUsersToUserGroup(requestParameters: UserManagementApiAddUsersToUserGroupRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).addUsersToUserGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to assign a permission to specific users. Administrating tenant users can assign permissions  to users in the administrating tenant and in the analytic tenants those users belong to.
     * @summary Assign permissions to users
     * @param {UserManagementApiAssignPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public assignPermissions(requestParameters: UserManagementApiAssignPermissionsRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).assignPermissions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to assign a permission to specific user groups. This assigns the permission to all users in the user group.
     * @summary Assign permissions to user groups
     * @param {UserManagementApiAssignPermissionsToUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public assignPermissionsToUserGroups(requestParameters: UserManagementApiAssignPermissionsToUserGroupsRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).assignPermissionsToUserGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
     * @summary Delete a user
     * @param {UserManagementApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public deleteUser(requestParameters: UserManagementApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).deleteUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to export the list of permissions in a tenant. This report includes the permission name,  permission description, and permission ID for all permissions in the tenant.   Administrating tenant users can export permissions lists for the administrating tenant and the analytic tenants  those users belong to.
     * @summary Retrieve a list of all permissions in XLSX format
     * @param {UserManagementApiGetAllPermissionsXLSXRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getAllPermissionsXLSX(requestParameters: UserManagementApiGetAllPermissionsXLSXRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getAllPermissionsXLSX(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the full list of user groups in a tenant.
     * @summary Retrieve a list of all user groups
     * @param {UserManagementApiGetAllUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getAllUserGroups(requestParameters: UserManagementApiGetAllUserGroupsRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getAllUserGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the full list of users and their current states.
     * @summary Retrieve a list of all users
     * @param {UserManagementApiGetAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getAllUsers(requestParameters: UserManagementApiGetAllUsersRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getAllUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to export the Application Logs for a tenant. The Application Logs track information about your  users and how they are using the application. Performing regular audits will help you identify potential security  issues and keep your data safe. As part of user management, download the Application Logs to monitor user activity  and logon events to ensure your users are performing authorized activities.   Administrating tenant users can export application logs for the administrating tenant and the analytic tenants  those users belong to.
     * @summary Retrieve the Application Logs
     * @param {UserManagementApiGetApplicationLogsXLSXRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getApplicationLogsXLSX(requestParameters: UserManagementApiGetApplicationLogsXLSXRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getApplicationLogsXLSX(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to export the data security report of a user. The Data Security Report provides information  about a specific user to see which populations and properties that user has access to as a result of the  permissions assigned to them.   Administrating tenant users can export the report for users in the administrating tenant and the analytic  tenants those users belong to.
     * @summary Retrieve the Data Security Report
     * @param {UserManagementApiGetDataSecurityReportXLSXRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getDataSecurityReportXLSX(requestParameters: UserManagementApiGetDataSecurityReportXLSXRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getDataSecurityReportXLSX(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve all the users that are assigned a specified permission. You must know the ID  of the permission you want to retrieve users for.
     * @summary Retrieve users that are assigned a specific permission
     * @param {UserManagementApiGetPermissionAssignedUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getPermissionAssignedUsers(requestParameters: UserManagementApiGetPermissionAssignedUsersRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getPermissionAssignedUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to export the profiles assigned to each user. This report details the profiles assigned to  each user and the profile validity period.   Administrating tenant users can export profile assignments for the administrating tenant and the analytic tenants  those users belong to.
     * @summary Retrieve user profile assignments in XLSX format
     * @param {UserManagementApiGetProfileAssignmentsXLSXRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getProfileAssignmentsXLSX(requestParameters: UserManagementApiGetProfileAssignmentsXLSXRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getProfileAssignmentsXLSX(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve all details for a specified user.
     * @summary Retrieve a user\'s details
     * @param {UserManagementApiGetUserDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getUserDetail(requestParameters: UserManagementApiGetUserDetailRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getUserDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the list of users explicitly assigned to a user group. Users that are implicitly  included in the user group through the user group\'s dynamic filters are not returned by this endpoint.
     * @summary Retrieve a list of user group users
     * @param {UserManagementApiGetUserGroupUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getUserGroupUsers(requestParameters: UserManagementApiGetUserGroupUsersRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getUserGroupUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to export the user permission assignments for a tenant. The permission assignments report  provides a summary of the permissions your users have been assigned and how each permission is being used across  your user base, as well as the users that do not have any permissions assigned to them.   Administrating tenant users can export permission assignments for the administrating tenant and the analytic  tenants those users belong to.
     * @summary Retrieve user permissions in XLSX format
     * @param {UserManagementApiGetUserPermissionsXLSXRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public getUserPermissionsXLSX(requestParameters: UserManagementApiGetUserPermissionsXLSXRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getUserPermissionsXLSX(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to remove a permission from specific users. Administrating tenant users can remove permissions  from users in the administrating tenant and in the analytic tenants those users belong to.
     * @summary Remove permissions from users
     * @param {UserManagementApiRemovePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public removePermissions(requestParameters: UserManagementApiRemovePermissionsRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).removePermissions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to remove users from specific user groups.
     * @summary Remove users from user groups
     * @param {UserManagementApiRemoveUsersFromUserGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public removeUsersFromUserGroup(requestParameters: UserManagementApiRemoveUsersFromUserGroupRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).removeUsersFromUserGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to remove a permission from specific user groups.
     * @summary Remove permissions from user groups
     * @param {UserManagementApiRevokePermissionsFromUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public revokePermissionsFromUserGroups(requestParameters: UserManagementApiRevokePermissionsFromUserGroupsRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).revokePermissionsFromUserGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update an existing user\'s information, such as their display name or if the user is enabled in Visier.
     * @summary Update a user
     * @param {UserManagementApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiGenerated
     */
    public updateUser(requestParameters: UserManagementApiUpdateUserRequest, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).updateUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
