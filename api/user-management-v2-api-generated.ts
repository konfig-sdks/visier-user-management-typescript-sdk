/* tslint:disable */
/* eslint-disable */
/*
Visier User Management APIs

Visier APIs for managing users within an organization

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { UserCreationAPIRequestDTO } from '../models';
// @ts-ignore
import { UsersAPIResponseDTO } from '../models';
// @ts-ignore
import { UsersCreationAPIRequestDTO } from '../models';
// @ts-ignore
import { UsersDeleteAPIRequestDTO } from '../models';
// @ts-ignore
import { UsersUpdateAPIRequestDTO } from '../models';
// @ts-ignore
import { UsersUpdateAPIUserDTO } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserManagementV2Api - axios parameter creator
 * @export
 */
export const UserManagementV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to create new users. Administrating tenant users can specify the tenant in which to add these users.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Add users
         * @param {UsersCreationAPIRequestDTO} usersCreationAPIRequestDTO 
         * @param {string} [tenantCode] Specify the tenant to create a user in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsers: async (usersCreationAPIRequestDTO: UsersCreationAPIRequestDTO, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersCreationAPIRequestDTO' is not null or undefined
            assertParamExists('addUsers', 'usersCreationAPIRequestDTO', usersCreationAPIRequestDTO)
            const localVarPath = `/v2/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersCreationAPIRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/admin/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersCreationAPIRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Delete users
         * @param {UsersDeleteAPIRequestDTO} usersDeleteAPIRequestDTO 
         * @param {string} [tenantCode] Specify the tenant to delete a user in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: async (usersDeleteAPIRequestDTO: UsersDeleteAPIRequestDTO, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersDeleteAPIRequestDTO' is not null or undefined
            assertParamExists('deleteUsers', 'usersDeleteAPIRequestDTO', usersDeleteAPIRequestDTO)
            const localVarPath = `/v2/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersDeleteAPIRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/admin/users',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersDeleteAPIRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update an existing user\'s information, such as their display name or if the user is enabled in Visier.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Update users
         * @param {UsersUpdateAPIRequestDTO} usersUpdateAPIRequestDTO 
         * @param {string} [tenantCode] Specify the tenant to update a user in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: async (usersUpdateAPIRequestDTO: UsersUpdateAPIRequestDTO, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersUpdateAPIRequestDTO' is not null or undefined
            assertParamExists('updateUsers', 'usersUpdateAPIRequestDTO', usersUpdateAPIRequestDTO)
            const localVarPath = `/v2/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersUpdateAPIRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/admin/users',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateAPIRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementV2Api - functional programming interface
 * @export
 */
export const UserManagementV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to create new users. Administrating tenant users can specify the tenant in which to add these users.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Add users
         * @param {UserManagementV2ApiAddUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsers(requestParameters: UserManagementV2ApiAddUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersAPIResponseDTO>> {
            const usersCreationAPIRequestDTO: UsersCreationAPIRequestDTO = {
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUsers(usersCreationAPIRequestDTO, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Delete users
         * @param {UserManagementV2ApiDeleteUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsers(requestParameters: UserManagementV2ApiDeleteUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersAPIResponseDTO>> {
            const usersDeleteAPIRequestDTO: UsersDeleteAPIRequestDTO = {
                userIds: requestParameters.userIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsers(usersDeleteAPIRequestDTO, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to update an existing user\'s information, such as their display name or if the user is enabled in Visier.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Update users
         * @param {UserManagementV2ApiUpdateUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsers(requestParameters: UserManagementV2ApiUpdateUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersAPIResponseDTO>> {
            const usersUpdateAPIRequestDTO: UsersUpdateAPIRequestDTO = {
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsers(usersUpdateAPIRequestDTO, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserManagementV2Api - factory interface
 * @export
 */
export const UserManagementV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementV2ApiFp(configuration)
    return {
        /**
         * This API allows you to create new users. Administrating tenant users can specify the tenant in which to add these users.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Add users
         * @param {UserManagementV2ApiAddUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsers(requestParameters: UserManagementV2ApiAddUsersRequest, options?: AxiosRequestConfig): AxiosPromise<UsersAPIResponseDTO> {
            return localVarFp.addUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Delete users
         * @param {UserManagementV2ApiDeleteUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers(requestParameters: UserManagementV2ApiDeleteUsersRequest, options?: AxiosRequestConfig): AxiosPromise<UsersAPIResponseDTO> {
            return localVarFp.deleteUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update an existing user\'s information, such as their display name or if the user is enabled in Visier.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Update users
         * @param {UserManagementV2ApiUpdateUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers(requestParameters: UserManagementV2ApiUpdateUsersRequest, options?: AxiosRequestConfig): AxiosPromise<UsersAPIResponseDTO> {
            return localVarFp.updateUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUsers operation in UserManagementV2Api.
 * @export
 * @interface UserManagementV2ApiAddUsersRequest
 */
export type UserManagementV2ApiAddUsersRequest = {
    
    /**
    * Specify the tenant to create a user in.
    * @type {string}
    * @memberof UserManagementV2ApiAddUsers
    */
    readonly tenantCode?: string
    
} & UsersCreationAPIRequestDTO

/**
 * Request parameters for deleteUsers operation in UserManagementV2Api.
 * @export
 * @interface UserManagementV2ApiDeleteUsersRequest
 */
export type UserManagementV2ApiDeleteUsersRequest = {
    
    /**
    * Specify the tenant to delete a user in.
    * @type {string}
    * @memberof UserManagementV2ApiDeleteUsers
    */
    readonly tenantCode?: string
    
} & UsersDeleteAPIRequestDTO

/**
 * Request parameters for updateUsers operation in UserManagementV2Api.
 * @export
 * @interface UserManagementV2ApiUpdateUsersRequest
 */
export type UserManagementV2ApiUpdateUsersRequest = {
    
    /**
    * Specify the tenant to update a user in.
    * @type {string}
    * @memberof UserManagementV2ApiUpdateUsers
    */
    readonly tenantCode?: string
    
} & UsersUpdateAPIRequestDTO

/**
 * UserManagementV2ApiGenerated - object-oriented interface
 * @export
 * @class UserManagementV2ApiGenerated
 * @extends {BaseAPI}
 */
export class UserManagementV2ApiGenerated extends BaseAPI {
    /**
     * This API allows you to create new users. Administrating tenant users can specify the tenant in which to add these users.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Add users
     * @param {UserManagementV2ApiAddUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementV2ApiGenerated
     */
    public addUsers(requestParameters: UserManagementV2ApiAddUsersRequest, options?: AxiosRequestConfig) {
        return UserManagementV2ApiFp(this.configuration).addUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Delete users
     * @param {UserManagementV2ApiDeleteUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementV2ApiGenerated
     */
    public deleteUsers(requestParameters: UserManagementV2ApiDeleteUsersRequest, options?: AxiosRequestConfig) {
        return UserManagementV2ApiFp(this.configuration).deleteUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update an existing user\'s information, such as their display name or if the user is enabled in Visier.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Update users
     * @param {UserManagementV2ApiUpdateUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementV2ApiGenerated
     */
    public updateUsers(requestParameters: UserManagementV2ApiUpdateUsersRequest, options?: AxiosRequestConfig) {
        return UserManagementV2ApiFp(this.configuration).updateUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
